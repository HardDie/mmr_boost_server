// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/HardDie/mmr_boost_server/internal/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IPostgresAccessToken is an autogenerated mock type for the IPostgresAccessToken type
type IPostgresAccessToken struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: ctx, userID, tokenHash, expiredAt
func (_m *IPostgresAccessToken) CreateOrUpdate(ctx context.Context, userID int32, tokenHash string, expiredAt time.Time) (*entity.AccessToken, error) {
	ret := _m.Called(ctx, userID, tokenHash, expiredAt)

	var r0 *entity.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time) (*entity.AccessToken, error)); ok {
		return rf(ctx, userID, tokenHash, expiredAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time) *entity.AccessToken); ok {
		r0 = rf(ctx, userID, tokenHash, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, time.Time) error); ok {
		r1 = rf(ctx, userID, tokenHash, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *IPostgresAccessToken) DeleteByID(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: ctx, tokenHash
func (_m *IPostgresAccessToken) GetByUserID(ctx context.Context, tokenHash string) (*entity.AccessToken, error) {
	ret := _m.Called(ctx, tokenHash)

	var r0 *entity.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.AccessToken, error)); ok {
		return rf(ctx, tokenHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.AccessToken); ok {
		r0 = rf(ctx, tokenHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPostgresAccessToken interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostgresAccessToken creates a new instance of IPostgresAccessToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostgresAccessToken(t mockConstructorTestingTNewIPostgresAccessToken) *IPostgresAccessToken {
	mock := &IPostgresAccessToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
