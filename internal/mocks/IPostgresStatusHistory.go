// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/HardDie/mmr_boost_server/internal/dto"
	entity "github.com/HardDie/mmr_boost_server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IPostgresStatusHistory is an autogenerated mock type for the IPostgresStatusHistory type
type IPostgresStatusHistory struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, applicationID
func (_m *IPostgresStatusHistory) List(ctx context.Context, applicationID int32) ([]*entity.StatusHistory, error) {
	ret := _m.Called(ctx, applicationID)

	var r0 []*entity.StatusHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*entity.StatusHistory, error)); ok {
		return rf(ctx, applicationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*entity.StatusHistory); ok {
		r0 = rf(ctx, applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.StatusHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEvent provides a mock function with given fields: ctx, req
func (_m *IPostgresStatusHistory) NewEvent(ctx context.Context, req *dto.StatusHistoryNewEventRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.StatusHistoryNewEventRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIPostgresStatusHistory interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostgresStatusHistory creates a new instance of IPostgresStatusHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostgresStatusHistory(t mockConstructorTestingTNewIPostgresStatusHistory) *IPostgresStatusHistory {
	mock := &IPostgresStatusHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
