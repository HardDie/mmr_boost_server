// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/HardDie/mmr_boost_server/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IPostgresPassword is an autogenerated mock type for the IPostgresPassword type
type IPostgresPassword struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userID, passwordHash
func (_m *IPostgresPassword) Create(ctx context.Context, userID int32, passwordHash string) (*entity.Password, error) {
	ret := _m.Called(ctx, userID, passwordHash)

	var r0 *entity.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*entity.Password, error)); ok {
		return rf(ctx, userID, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *entity.Password); ok {
		r0 = rf(ctx, userID, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, userID, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *IPostgresPassword) GetByUserID(ctx context.Context, userID int32) (*entity.Password, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.Password, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.Password); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseFailedAttempts provides a mock function with given fields: ctx, id
func (_m *IPostgresPassword) IncreaseFailedAttempts(ctx context.Context, id int32) (*entity.Password, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.Password, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.Password); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetFailedAttempts provides a mock function with given fields: ctx, id
func (_m *IPostgresPassword) ResetFailedAttempts(ctx context.Context, id int32) (*entity.Password, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.Password, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.Password); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, passwordHash
func (_m *IPostgresPassword) Update(ctx context.Context, id int32, passwordHash string) (*entity.Password, error) {
	ret := _m.Called(ctx, id, passwordHash)

	var r0 *entity.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) (*entity.Password, error)); ok {
		return rf(ctx, id, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) *entity.Password); ok {
		r0 = rf(ctx, id, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) error); ok {
		r1 = rf(ctx, id, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPostgresPassword interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostgresPassword creates a new instance of IPostgresPassword. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostgresPassword(t mockConstructorTestingTNewIPostgresPassword) *IPostgresPassword {
	mock := &IPostgresPassword{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
