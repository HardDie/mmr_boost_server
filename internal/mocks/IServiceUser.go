// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/HardDie/mmr_boost_server/internal/dto"
	entity "github.com/HardDie/mmr_boost_server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IServiceUser is an autogenerated mock type for the IServiceUser type
type IServiceUser struct {
	mock.Mock
}

// UpdatePassword provides a mock function with given fields: ctx, req, userID
func (_m *IServiceUser) UpdatePassword(ctx context.Context, req *dto.UserUpdatePasswordRequest, userID int32) error {
	ret := _m.Called(ctx, req, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserUpdatePasswordRequest, int32) error); ok {
		r0 = rf(ctx, req, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSteamID provides a mock function with given fields: ctx, req, userID
func (_m *IServiceUser) UpdateSteamID(ctx context.Context, req *dto.UserUpdateSteamIDRequest, userID int32) (*entity.User, error) {
	ret := _m.Called(ctx, req, userID)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserUpdateSteamIDRequest, int32) (*entity.User, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UserUpdateSteamIDRequest, int32) *entity.User); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UserUpdateSteamIDRequest, int32) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIServiceUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewIServiceUser creates a new instance of IServiceUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIServiceUser(t mockConstructorTestingTNewIServiceUser) *IServiceUser {
	mock := &IServiceUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
