// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/HardDie/mmr_boost_server/internal/dto"
	entity "github.com/HardDie/mmr_boost_server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IServiceAuth is an autogenerated mock type for the IServiceAuth type
type IServiceAuth struct {
	mock.Mock
}

// GenerateCookie provides a mock function with given fields: ctx, userID
func (_m *IServiceAuth) GenerateCookie(ctx context.Context, userID int32) (*entity.AccessToken, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.AccessToken, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.AccessToken); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, userID
func (_m *IServiceAuth) GetUserInfo(ctx context.Context, userID int32) (*entity.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *IServiceAuth) Login(ctx context.Context, req *dto.AuthLoginRequest) (*entity.User, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthLoginRequest) (*entity.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthLoginRequest) *entity.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.AuthLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, sessionID
func (_m *IServiceAuth) Logout(ctx context.Context, sessionID int32) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, req
func (_m *IServiceAuth) Register(ctx context.Context, req *dto.AuthRegisterRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthRegisterRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: ctx, req
func (_m *IServiceAuth) ResetPassword(ctx context.Context, req *dto.AuthResetPasswordRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthResetPasswordRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetPasswordEmail provides a mock function with given fields: ctx, req
func (_m *IServiceAuth) SendResetPasswordEmail(ctx context.Context, req *dto.AuthResetPasswordEmailRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthResetPasswordEmailRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendValidationEmail provides a mock function with given fields: ctx, name
func (_m *IServiceAuth) SendValidationEmail(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateCookie provides a mock function with given fields: ctx, sessionKey
func (_m *IServiceAuth) ValidateCookie(ctx context.Context, sessionKey string) (*entity.User, *entity.AccessToken, error) {
	ret := _m.Called(ctx, sessionKey)

	var r0 *entity.User
	var r1 *entity.AccessToken
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, *entity.AccessToken, error)); ok {
		return rf(ctx, sessionKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, sessionKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *entity.AccessToken); ok {
		r1 = rf(ctx, sessionKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.AccessToken)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, sessionKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateEmail provides a mock function with given fields: ctx, code
func (_m *IServiceAuth) ValidateEmail(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIServiceAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewIServiceAuth creates a new instance of IServiceAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIServiceAuth(t mockConstructorTestingTNewIServiceAuth) *IServiceAuth {
	mock := &IServiceAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
