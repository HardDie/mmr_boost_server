// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/HardDie/mmr_boost_server/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// IServicePrice is an autogenerated mock type for the IServicePrice type
type IServicePrice struct {
	mock.Mock
}

// Price provides a mock function with given fields: ctx, req
func (_m *IServicePrice) Price(ctx context.Context, req *dto.PriceRequest) (int32, error) {
	ret := _m.Called(ctx, req)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PriceRequest) (int32, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PriceRequest) int32); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.PriceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIServicePrice interface {
	mock.TestingT
	Cleanup(func())
}

// NewIServicePrice creates a new instance of IServicePrice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIServicePrice(t mockConstructorTestingTNewIServicePrice) *IServicePrice {
	mock := &IServicePrice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
