// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/HardDie/mmr_boost_server/internal/dto"
	entity "github.com/HardDie/mmr_boost_server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// IServiceApplication is an autogenerated mock type for the IServiceApplication type
type IServiceApplication struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) Create(ctx context.Context, req *dto.ApplicationCreateRequest) (*entity.ApplicationPublic, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ApplicationPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationCreateRequest) (*entity.ApplicationPublic, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationCreateRequest) *entity.ApplicationPublic); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ApplicationPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) DeleteItem(ctx context.Context, req *dto.ApplicationItemDeleteRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationItemDeleteRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ManagementItem provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) ManagementItem(ctx context.Context, req *dto.ApplicationManagementItemRequest) (*entity.ApplicationPublic, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ApplicationPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementItemRequest) (*entity.ApplicationPublic, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementItemRequest) *entity.ApplicationPublic); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ApplicationPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationManagementItemRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagementList provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) ManagementList(ctx context.Context, req *dto.ApplicationManagementListRequest) ([]*entity.ApplicationPublic, error) {
	ret := _m.Called(ctx, req)

	var r0 []*entity.ApplicationPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementListRequest) ([]*entity.ApplicationPublic, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementListRequest) []*entity.ApplicationPublic); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ApplicationPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationManagementListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagementPrivateItem provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) ManagementPrivateItem(ctx context.Context, req *dto.ApplicationManagementItemRequest) (*entity.ApplicationPrivate, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ApplicationPrivate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementItemRequest) (*entity.ApplicationPrivate, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationManagementItemRequest) *entity.ApplicationPrivate); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ApplicationPrivate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationManagementItemRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserItem provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) UserItem(ctx context.Context, req *dto.ApplicationUserItemRequest) (*entity.ApplicationPublic, error) {
	ret := _m.Called(ctx, req)

	var r0 *entity.ApplicationPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationUserItemRequest) (*entity.ApplicationPublic, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationUserItemRequest) *entity.ApplicationPublic); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ApplicationPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationUserItemRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: ctx, req
func (_m *IServiceApplication) UserList(ctx context.Context, req *dto.ApplicationUserListRequest) ([]*entity.ApplicationPublic, error) {
	ret := _m.Called(ctx, req)

	var r0 []*entity.ApplicationPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationUserListRequest) ([]*entity.ApplicationPublic, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ApplicationUserListRequest) []*entity.ApplicationPublic); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.ApplicationPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ApplicationUserListRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIServiceApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewIServiceApplication creates a new instance of IServiceApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIServiceApplication(t mockConstructorTestingTNewIServiceApplication) *IServiceApplication {
	mock := &IServiceApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
